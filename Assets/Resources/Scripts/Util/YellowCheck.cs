using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class YellowCheck : MonoBehaviour
{
    Board board;
    PlayerController playerController;

    bool isTurnLeft;
    bool isTurnRight;

    int yellowCount;

    // Start is called before the first frame update
    void Start()
    {
        board = FindObjectOfType<Board>();
        PlayerController playerController = FindObjectOfType<PlayerController>();
    }



    public void YellowRotation(int col, int row)
    {
        yellowCount = 0;
        StartCoroutine(yellowRotation(col, row));
    }

    IEnumerator yellowRotation(int col, int row)
    {
        yield return new WaitForSeconds(.1f);
        yellowCount = 0;
        var obj = board.allTiles[col, row].GetComponent<Tiles>();

        if (obj.isIndexUp)
        {
            YellowUp(col, row + 1);
            if (!obj.isConnect)
            {
                if (yellowCount == 3)
                {
                    if (isTurnLeft)
                    {
                        obj.isUp = false;
                        obj.isDown = false;
                        obj.isLeft = true;
                        obj.isRight = false;
                    }
                    else if (isTurnRight)
                    {
                        obj.isUp = false;
                        obj.isDown = false;
                        obj.isLeft = false;
                        obj.isRight = true;
                    }
                }
                else if (yellowCount == 5)
                {
                    obj.isUp = false;
                    obj.isDown = true;
                    obj.isLeft = false;
                    obj.isRight = false;
                }
                else if (yellowCount < 3)
                {
                    {
                        obj.isUp = true;
                        obj.isDown = false;
                        obj.isLeft = false;
                        obj.isRight = false;
                        isTurnLeft = false;
                        isTurnRight = false;
                    }
                }
            }
        }

        else if (obj.isIndexDown)
        {
            YellowDown(col, row - 1);

            if (!obj.isConnect)
            {
                if (yellowCount == 3)
                {
                    if (isTurnLeft)
                    {
                        obj.isUp = false;
                        obj.isDown = false;
                        obj.isLeft = true;
                        obj.isRight = false;
                    }
                    else if (isTurnRight)
                    {
                        obj.isUp = false;
                        obj.isDown = false;
                        obj.isLeft = false;
                        obj.isRight = true;
                    }
                }
                else if (yellowCount == 5)
                {
                    obj.isDown = false;
                    obj.isUp = true;
                    obj.isLeft = false;
                    obj.isRight = false;
                }
                else if (yellowCount < 3)
                {
                    obj.isUp = false;
                    obj.isDown = true;
                    obj.isLeft = false;
                    obj.isRight = false;
                    isTurnLeft = false;
                    isTurnRight = false;
                }
            }
        }
        else if (obj.isIndexLeft)
        {
            YellowLeft(col - 1, row);
            if (!obj.isConnect)
            {
                if (yellowCount == 3)
                {
                    if (isTurnLeft)
                    {
                        obj.isUp = false;
                        obj.isDown = true;
                        obj.isLeft = false;
                        obj.isRight = false;
                    }
                    else if (isTurnRight)
                    {
                        obj.isUp = true;
                        obj.isDown = false;
                        obj.isLeft = false;
                        obj.isRight = false;
                    }
                }
                else if (yellowCount == 5)
                {
                    obj.isLeft = false;
                    obj.isRight = true;
                    obj.isUp = false;
                    obj.isDown = false;
                }
                else if (yellowCount < 3)
                {
                    obj.isUp = false;
                    obj.isDown = false;
                    obj.isLeft = true;
                    obj.isRight = false;
                    isTurnLeft = false;
                    isTurnRight = false;
                }
            }
        }
        else if (obj.isIndexRight)
        {
            YellowRight(col + 1, row);

            if (!obj.isConnect)
            {
                if (yellowCount == 3)
                {
                    if (isTurnLeft)
                    {
                        obj.isUp = true;
                        obj.isDown = false;
                        obj.isLeft = false;
                        obj.isRight = false;
                    }
                    else if (isTurnRight)
                    {
                        obj.isUp = false;
                        obj.isDown = true;
                        obj.isLeft = false;
                        obj.isRight = false;
                    }
                }
                else if (yellowCount == 5)
                {
                    obj.isRight = false;
                    obj.isLeft = true;
                    obj.isUp = false;
                    obj.isDown = false;
                }
                else if (yellowCount < 3)
                {
                    obj.isUp = false;
                    obj.isDown = false;
                    obj.isLeft = false;
                    obj.isRight = true;
                    isTurnLeft = false;
                    isTurnRight = false;
                }
            }
        }
    }

    void YellowUp(int col, int row)
    {
        var obj = board.allTiles[col, row];
        Debug.Log(obj.name);
        if (obj != null && board.allTiles[col, row].GetComponent<Tiles>().isYellow) // 위
        {
            yellowCount++;
            if (board.allTiles[col - 1, row] != null && board.allTiles[col - 1, row].GetComponent<Tiles>().isYellow) //위왼
            {
                isTurnLeft = true;
                yellowCount++;
                if (board.allTiles[col - 1, row -1 ] != null && board.allTiles[col - 1, row - 1].GetComponent<Tiles>().isYellow)//위왼아
                {
                    yellowCount++;
                    if (board.allTiles[col - 1, row - 2] != null && board.allTiles[col - 1, row - 2].GetComponent<Tiles>().isYellow) // 위왼아아
                    {
                        yellowCount++;
                        if(board.allTiles[col, row - 2] != null && board.allTiles[col, row - 2].GetComponent<Tiles>().isYellow) // 위왼아아오
                        {
                            yellowCount++;
                        }
                    }
                }
            }
            else if (board.allTiles[col + 1, row] != null && board.allTiles[col + 1, row].GetComponent<Tiles>().isYellow)//위오
            {
                isTurnRight = true;
                yellowCount++;
                Debug.Log(yellowCount);
                if (board.allTiles[col + 1, row - 1] != null && board.allTiles[col + 1, row - 1].GetComponent<Tiles>().isYellow)//위오아
                {
                    yellowCount++;

                    Debug.Log(yellowCount);
                    if (board.allTiles[col + 1, row - 2] != null && board.allTiles[col + 1, row - 2].GetComponent<Tiles>().isYellow) // 위오아아
                    {
                        yellowCount++;

                        Debug.Log(yellowCount);
                        if (board.allTiles[col, row - 2] != null && board.allTiles[col, row - 2].GetComponent<Tiles>().isYellow) // 위왼아아왼
                        {
                            yellowCount++;

                            Debug.Log(yellowCount);
                        }
                    }
                }
            }
        }
    }

    void YellowDown(int col, int row) //다운 값을 가져옴
    {
        var obj = board.allTiles[col, row];
        Debug.Log(obj.name);
        if (obj != null && board.allTiles[col, row].GetComponent<Tiles>().isYellow) // 아래
        {
            yellowCount++;
            if (board.allTiles[col - 1, row] != null && board.allTiles[col - 1, row].GetComponent<Tiles>().isYellow) //아왼
            {
                isTurnLeft = true;
                yellowCount++;
                if (board.allTiles[col - 1, row + 1] != null && board.allTiles[col - 1, row + 1].GetComponent<Tiles>().isYellow)//아왼위
                {
                    yellowCount++;
                    if (board.allTiles[col - 1, row + 2] != null && board.allTiles[col - 1, row + 2].GetComponent<Tiles>().isYellow) // 아왼위위
                    {
                        yellowCount++;
                        if (board.allTiles[col, row + 2] != null && board.allTiles[col, row + 2].GetComponent<Tiles>().isYellow) // 아왼위위오
                        {
                            yellowCount++;
                        }
                    }
                }
            }
            else if (board.allTiles[col + 1, row] != null && board.allTiles[col + 1, row].GetComponent<Tiles>().isYellow)//아오
            {
                isTurnRight = true;
                yellowCount++;
                if (board.allTiles[col + 1, row + 1] != null && board.allTiles[col + 1, row + 1].GetComponent<Tiles>().isYellow)//아오위
                {
                    yellowCount++;
                    if (board.allTiles[col + 1, row + 2] != null && board.allTiles[col + 1, row + 2].GetComponent<Tiles>().isYellow) // 아오위위
                    {
                        yellowCount++;
                        if (board.allTiles[col, row + 2] != null && board.allTiles[col, row + 2].GetComponent<Tiles>().isYellow) // 아오위위왼
                        {
                            yellowCount++;
                        }
                    }
                }
            }
        }
    }

    void YellowLeft(int col, int row)
    {
        var obj = board.allTiles[col, row];
        Debug.Log(obj.name);
        if (obj != null && board.allTiles[col, row].GetComponent<Tiles>().isYellow) // 왼
        {
            yellowCount++;
            if (board.allTiles[col, row + 1] != null && board.allTiles[col, row + 1].GetComponent<Tiles>().isYellow) //왼위
            {
                isTurnRight = true;
                yellowCount++;
                if (board.allTiles[col + 1, row + 1] != null && board.allTiles[col + 1, row + 1].GetComponent<Tiles>().isYellow)//왼위오
                {
                    yellowCount++;
                    if (board.allTiles[col + 2, row + 1] != null && board.allTiles[col + 2, row + 1].GetComponent<Tiles>().isYellow) // 왼위오오
                    {
                        yellowCount++;
                        if (board.allTiles[col + 2, row] != null && board.allTiles[col + 2, row].GetComponent<Tiles>().isYellow) // 왼위오오아
                        {
                            yellowCount++;
                        }
                    }
                }
            }
            else if (board.allTiles[col, row - 1] != null && board.allTiles[col, row - 1].GetComponent<Tiles>().isYellow)//왼아
            {
                isTurnLeft = true;
                yellowCount++;
                if (board.allTiles[col + 1, row - 1] != null && board.allTiles[col + 1, row - 1].GetComponent<Tiles>().isYellow)//왼아오
                {
                    yellowCount++;
                    if (board.allTiles[col + 2, row - 1] != null && board.allTiles[col + 2, row - 1].GetComponent<Tiles>().isYellow) // 왼아오오
                    {
                        yellowCount++;
                        if (board.allTiles[col + 2, row] != null && board.allTiles[col + 2, row].GetComponent<Tiles>().isYellow) // 왼아오오위
                        {
                            yellowCount++;
                        }
                    }
                }
            }
        }
    }

    void YellowRight(int col, int row)
    {
        var obj = board.allTiles[col, row];
        if (obj != null && board.allTiles[col, row].GetComponent<Tiles>().isYellow) // 오
        {
            yellowCount++;
            if (board.allTiles[col, row + 1] != null && board.allTiles[col, row + 1].GetComponent<Tiles>().isYellow) //오위
            {
                isTurnLeft = true;
                yellowCount++;
                if (board.allTiles[col - 1, row + 1] != null && board.allTiles[col - 1, row + 1].GetComponent<Tiles>().isYellow)//오위왼
                {
                    yellowCount++;
                    if (board.allTiles[col - 2, row + 1] != null && board.allTiles[col - 2, row + 1].GetComponent<Tiles>().isYellow) // 오위왼왼
                    {
                        yellowCount++;
                        if (board.allTiles[col - 2, row] != null && board.allTiles[col -2, row].GetComponent<Tiles>().isYellow) // 오위왼왼아
                        {
                            yellowCount++;
                        }
                    }
                }
            }
            else if (board.allTiles[col, row - 1] != null && board.allTiles[col, row - 1].GetComponent<Tiles>().isYellow)//오아
            {
                isTurnRight = true;
                yellowCount++;
                if (board.allTiles[col - 1, row - 1] != null && board.allTiles[col - 1, row - 1].GetComponent<Tiles>().isYellow)//오아왼
                {
                    yellowCount++;
                    if (board.allTiles[col - 2, row - 1] != null && board.allTiles[col - 2, row - 1].GetComponent<Tiles>().isYellow) // 오아왼왼
                    {
                        yellowCount++;
                        if (board.allTiles[col - 2, row] != null && board.allTiles[col - 2, row].GetComponent<Tiles>().isYellow) // 오아왼왼위
                        {
                            yellowCount++;
                        }
                    }
                }
            }
        }
    }


    // Update is called once per frame
    void Update()
    {
        
    }
}
